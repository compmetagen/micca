#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@gmail.com>
## Copyright (C) 2013 Fondazione Edmund Mach
## Copyright (C) 2013 Davide Albanese

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse

from micca.utils import *
from micca import argutils
from micca import __version__


def main():
    description = """micca-rarefy-seqs rarefies a sequence file.
"""
    epilog = """Example:

 $ micca-rarefy-seqs seqs.fasta -f fasta -d 500

micca v. %s.
Author: Davide Albanese <davide.albanese@fmach.it>
Fondazione Edmund Mach, 2014.
""" % __version__
    
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        version=__version__, epilog=epilog)

    parser.add_argument('input', type=argutils.rfile,
                        help="input fastq/a file")
    parser.add_argument('output', help="output fastq/a file",
                        type=argutils.wfile)
    parser.add_argument('-d', '--depth', type=int, default=1000,
                        help="number of sequences to retain "
                             "(default %(default)s)")
    parser.add_argument('-f', '--format', choices=["fastq", "fasta"],
                        default="fastq",
                        help="input file format (default %(default)s)")
    parser.add_argument('-s', '--seed', metavar='SEED', default=0, type=int,
                        help="random seed for the random generator "
                        "(default %(default)s)")

    args = parser.parse_args()

    rarefy_seqs(args.input, args.output, depth=args.depth, fmt=args.format,
                seed=args.seed)

main()
