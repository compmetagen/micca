#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@gmail.com>
## Copyright (C) 2013 Fondazione Edmund Mach
## Copyright (C) 2013 Davide Albanese

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import argparse

from micca.otu import *
from micca import argutils
from micca import __version__


def main():
    description = """micca-merge merges input fastq/a files where sequences
ids are in the form 'SAMPLENAME||SEQID', where 'SAMPLENAME' is the input
filename without extension and 'SEQID' is the original sequence id. Input
files must have different names.
"""
    epilog = """Example:

 $ micca-merge sample1.fastq sample2.fastq sample3.fastq merged.fastq

micca v. %s.
Author: Davide Albanese <davide.albanese@fmach.it>
Fondazione Edmund Mach, 2014.
""" % __version__

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        version=__version__, epilog=epilog)

    parser.add_argument('input', nargs='+', type=argutils.rfile,
                        help="input fastq/a file(s)")
    parser.add_argument('output', type=argutils.wfile,
                        help="output fastq/a file")
    parser.add_argument('-f', '--format', choices=["fastq", "fasta"],
                        default="fastq",
                        help="input file format (default %(default)s)")

    args = parser.parse_args()

    in_basenames = [os.path.splitext(os.path.basename(in_filename))[0]
                    for in_filename in args.input]
    if len(set(in_basenames)) != len(in_basenames):
        sys.stderr.write("ERROR: input files must have different names\n")
        exit(1)

    merge_seqs(args.input, args.output, in_fmt=args.format,
               out_fmt=args.format)

main()