#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@gmail.com>
## Copyright (C) 2013 Fondazione Edmund Mach
## Copyright (C) 2013 Davide Albanese

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import argparse
import logging

from micca.phylo import *
from micca import argutils
from micca import __version__


def main():
    description = """micca-phylogeny performs a multiple (denovo o template) alignment and builds the
phylogenetic tree.
"""
    epilog = """Example:

 $ micca-phylogeny input.fasta -a template --template-file template.fasta \\
   -o phylo

micca v. %s.
Author: Davide Albanese <davide.albanese@fmach.it>
Fondazione Edmund Mach, 2014.
""" % __version__

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        version=__version__, epilog=epilog)
    parser.add_argument('input', help="input fasta file", type=argutils.rfile)
    parser.add_argument('-a', '--alignment',
                        choices=["denovo_muscle", "denovo_tcoffe", "template"],
                        default="denovo_muscle",
                        help="multiple alignment method (default %(default)s)")
    parser.add_argument('-f', '--tree-fast', action="store_true",
                        default=False,
                        help="speed up the neighbor joining phase and reduce "
                             "memory usage (recommended for >50,000 sequences)")
    parser.add_argument('-m', '--tree-model',
                        choices=["jc", "gtr"], default="jc",
                        help="tree model: Jukes-Cantor ('jc') or generalized "
                             "time-reversible ('gtr') (default %(default)s)")
    parser.add_argument('-t', '--tree-format',
                        choices=["newick", "phyloxml", "nexus"],
                        default="newick",
                        help="tree format (default %(default)s)")
    parser.add_argument('-o', '--output-dir', metavar='DIR', default=".",
                        type=argutils.wdir,
                        help="output directory (default %(default)s)")

    group_muscle = parser.add_argument_group("Muscle alignment")
    group_muscle.add_argument('--muscle-fast', action="store_true",
                              default=False,
                              help="a good compromise between speed and "
                                   "accuracy")

    group_tcoffe = parser.add_argument_group("T-Coffe alignment")
    group_tcoffe.add_argument('--tcoffe-num-threads', metavar='NUM',
                              type=int, default=1,
                              help="number of threads to use in T-Coffe "
                                   "(default %(default)s)")

    group_template = parser.add_argument_group("Template alignment")
    group_template.add_argument('--template-file', help="template fasta file",
                                type=argutils.rfile, metavar='FILE')
    group_template.add_argument('--template-min-perc', type=int, default=75,
                                help="minimum percent sequence identity to "
                                     "consider a sequence a match (default "
                                     "%(default)s)",
                                metavar='PERC')
    group_template.add_argument('--template-min-len', type=int, default=100,
                                metavar='LEN',
                                help="minimum sequence length to include in "
                                     "alignment (default %(default)s)")
    args = parser.parse_args()

    if args.alignment == "template" and (not args.template_file):
        parser.error("template alignment method requires a template file "
                     "(--template-file option)")

    align_filename = os.path.join(args.output_dir, "alignment.fasta")
    tree_filename = os.path.join(args.output_dir, "tree.tre")

    # create logger
    logger = logging.getLogger('phylo')
    logger.setLevel(logging.DEBUG)
    fh = logging.FileHandler(os.path.join(args.output_dir, 'phylogeny.log'))
    fh.setLevel(logging.DEBUG)
    formatter = logging.Formatter("[%(levelname)s] %(asctime)s: %(message)s")
    fh.setFormatter(formatter)
    logger.addHandler(fh)

    if args.alignment == "denovo_muscle":
        malign_denovo_muscle(in_filename=args.input,
                             align_filename=align_filename,
                             fast=args.muscle_fast)
    elif args.alignment == "denovo_tcoffe":
        malign_denovo_tcoffe(in_filename=args.input,
                             align_filename=align_filename,
                             num_threads=args.tcoffe_num_threads)
    else:
        malign_template(in_filename=args.input,
                        template_filename=args.template_file,
                        align_filename=align_filename,
                        min_perc_identity=args.template_min_perc,
                        min_len=args.template_min_len)

    build_tree(in_filename=align_filename, tree_filename=tree_filename,
               tree_model=args.tree_model, tree_format=args.tree_format,
               fast=args.tree_fast)

main()
