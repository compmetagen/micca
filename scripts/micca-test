#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@gmail.com>
## Copyright (C) 2013 Fondazione Edmund Mach
## Copyright (C) 2013 Davide Albanese

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os

import argparse
from distutils.spawn import find_executable

from micca import __version__


HEADER = '\033[95m'
OK = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'

def find_module(name, module):
    sys.stdout.write("%s... " % name)
    try:
        __import__(module)
    except ImportError, e:
        sys.stdout.write("%snot installed%s\n" % (FAIL, ENDC))
    else:
        sys.stdout.write("%sOK%s\n" % (OK, ENDC))

def find_exe(name, exe):
    sys.stdout.write("%s... " % name)

    if find_executable(exe):
        sys.stdout.write("%sOK%s\n" % (OK, ENDC))
    else:
        sys.stdout.write("%snot installed%s\n" % (FAIL, ENDC))

def find_rdp():
    sys.stdout.write("RDP Classifier... ")
    rdppath = os.getenv("RDPPATH")
    if rdppath is None:
        sys.stdout.write("%sRDPPATH environment variable is not set%s\n" \
                         % (FAIL, ENDC))
        return

    rdpjar_list = glob.glob(os.path.join(rdppath, "rdp_classifier*.jar")) + \
                  glob.glob(os.path.join(rdppath, "dist/classifier.jar"))
    if not len(rdpjar_list):
        sys.stdout.write("%sno rdp_classifier*.jar or dist/classifier*.jar "
                         "found in RDPPATH%s\n" % (FAIL, ENDC))
        return

    sys.stdout.write("%sOK%s\n" % (OK, ENDC))

def main():

    description = """
"""
    epilog = """
micca v. %s.
Author: Davide Albanese <davide.albanese@fmach.it>
Fondazione Edmund Mach, 2014.
""" % __version__

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        version=__version__, epilog=epilog)
    args = parser.parse_args()

    exes = {
        "SICKLE": "sickle",
        "CUTADAPT": "cutadapt",
        "UCHIME": "uchime",
        "DNACLUST": "dnaclust",
        "BLAST+": "blastn",
        "PyNAST": "pynast",
        "MUSCLE": "muscle",
        "T-Coffee": "t_coffee",
        "FastTree": "FastTree"
        }

    modules = {
        "NumPy": "numpy",
        "SciPy": "scipy",
        "matplotlib": "matplotlib",
        "pandas": "pandas",
        "Biopython": "Bio",
        "DendroPy": "dendropy"
        }

    sys.stdout.write("%sChecking for dependencies...%s\n" % (HEADER, ENDC))
    for name, exe in exes.iteritems():
        find_exe(name, exe)
    for name, module in modules.iteritems():
        find_module(name, module)
    find_rdp()

main()