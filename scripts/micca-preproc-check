#! /usr/bin/env python

## This code is written by Davide Albanese, <davide.albanese@gmail.com>
## Copyright (C) 2014 Fondazione Edmund Mach
## Copyright (C) 2014 Davide Albanese

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import division

import os
import argparse

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from micca.preproc import *
from micca import argutils
from micca import __version__


def main():
    description = """micca-preproc-check tries different combinations of length and
quality thresholds.
"""

    epilog = """Example:

 $ micca-preproc-check *.fastq preproc.png -f AGGATTAGATACCCTGGTA -r GTCGTCAGCTCGTGYYG

micca v. %s.
Author: Davide Albanese <davide.albanese@fmach.it>
Fondazione Edmund Mach, 2014.
""" % __version__

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        version=__version__, epilog=epilog)

    parser.add_argument('input', type=argutils.rfile,
                        help="input fastq file(s)")
    parser.add_argument('output', type=argutils.wfile,
                        help="output image file (.png, .pdf, .ps, .eps, .svg). "
                             "The image type is autodetected from the file "
                             "extension")
    parser.add_argument('-f', '--primer-forward', metavar='PRIMER',
                        help="remove forward primer sequences and "
                             "discard untrimmed reads")
    parser.add_argument('-r', '--primer-reverse', metavar='PRIMER',
                        help="remove reverse primer sequences")
    parser.add_argument('-e', '--primer-error-rate', metavar='RATE',
                        type=float, default=0.1,
                        help="maximum allowed error rate (number of errors "
                             "divided by the length of the region) (default "
                             "%(default)s)")
    parser.add_argument('-O', '--primer-overlap', metavar='LENGTH',
                        type=int, default=10,
                        help="minimum overlap length. If the overlap between "
                             "the read and the primer is shorter than LENGTH, "
                             "the read is not modified (default %(default)s)")
    parser.add_argument('-q', '--quality-threshold', nargs='+', type=int,
                        metavar='QUALITY', default=[10, 20, 25, 30],
                        help="thresholds for trimming based on average "
                             "quality in a window (default %(default)s)")
    parser.add_argument('-l', '--length-threshold', nargs='+', type=int,
                        metavar='LENGTH', default=[50, 100, 150, 200, 250,
                                                   300, 350, 400, 450, 500,
                                                   550],
                        help="thresholds to keep a read based on length after "
                             "trimming (default %(default)s)")
    args = parser.parse_args()

    basepath = os.path.splitext(args.input)[0]
    curr_in_filename = args.input  # current input file

    out_fwd_filename = basepath + "_FWD_TMP.fastq"
    out_rev_filename = basepath + "_REV_TMP.fastq"
    out_qual_filename = basepath + "_QUAL_TMP.fastq"

    # forward primer
    if args.primer_forward:
        remove_fwd_primer(in_filename=curr_in_filename,
                          out_filename=out_fwd_filename,
                          primer=args.primer_forward,
                          max_error_rate=args.primer_error_rate,
                          min_overlap=args.primer_overlap)
        curr_in_filename = out_fwd_filename

    # reverse primer
    if args.primer_reverse:
        remove_rev_primer(in_filename=curr_in_filename,
                          out_filename=out_rev_filename,
                          primer=args.primer_reverse,
                          max_error_rate=args.primer_error_rate,
                          min_overlap=args.primer_overlap)
        curr_in_filename = out_rev_filename

    n_reads = utils.fastq_n_seqs(args.input)
    n_reads_primer = utils.fastq_n_seqs(curr_in_filename)

    print "%d/%d reads pass the primer trimming step (%.2f%%)" % \
          (n_reads_primer, n_reads, (n_reads_primer / n_reads) * 100.)

    # quality trimming
    quality = np.sort(args.quality_threshold)
    length = np.sort(args.length_threshold)
    pct_reads = pd.DataFrame(index=length, columns=quality)
    for q in quality:
        for l in length:
            print "Check Q_thr=%d, L_thr=%d ..." % (q, l)
            quality_trimming(in_filename=curr_in_filename,
                             out_filename=out_qual_filename,
                             min_length=l, min_quality=q)
            n_reads_qual = utils.fastq_n_seqs(out_qual_filename)
            pct_reads.loc[l, q] = (n_reads_qual / n_reads_primer) * 100.

    # remove tmp files
    for filename in [out_fwd_filename, out_rev_filename, out_qual_filename]:
        try:
            os.remove(filename)
        except OSError:
            pass

    # plot figure
    fig = plt.figure(1)
    ax = plt.subplot(111)
    cmap = plt.cm.Paired
    colors = [cmap(i) for i in np.linspace(0, 1, pct_reads.shape[1])]
    for i, quality in enumerate(pct_reads):
        plt.plot(pct_reads.index, pct_reads[quality], linewidth=2,
                 label="Quality thr. = %d" % quality, color=colors[i])
    lgd = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=10)
    plt.xlabel("Length threshold")
    plt.ylabel("% reads passing filter")
    plt.xlim((length[0], length[-1]))
    plt.ylim((0, 100))
    ax.grid(True)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    fig.savefig(args.output, bbox_extra_artists=(lgd,), bbox_inches='tight')

main()
